
import { decodeSaveData, encodeJsonSaveString } from "./saveData/utils";

async function getObjectStore(store: string): Promise<IDBObjectStore> {
  return new Promise((resolve, reject) => {
      const request = window.indexedDB.open("bitburnerSave", 1);
      request.onerror = () => {
          console.error("Error occurred when interacting with IndexDB. Result:", request.result);
          reject("Error occurred when interacting with IndexDB");
      };
      request.onsuccess = function (this: IDBRequest<IDBDatabase>) {
          const db = this.result;
          const objectStore = db.transaction([store], "readwrite").objectStore(store);
          resolve(objectStore);
      };
  });
}

async function getData(store: string, key: string) : Promise<any> {
  const objectStore = await getObjectStore(store);
  return new Promise((resolve, reject) => {
      const request = objectStore.get(key);
      request.onerror = () => {
          console.error("Error occurred when getting data from IndexDB. Result:", request.result);
          reject("Error occurred when getting data from IndexDB");
      };
      request.onsuccess = () => {
          resolve(request.result);
      };
  });
}

async function putData(store: string, key: string, data: any) : Promise<any> {
  const objectStore = await getObjectStore(store);
  return new Promise((resolve, reject) => {
      const request = objectStore.put(data, key);
      request.onerror = () => {
          console.error("Error occurred when putting data into IndexDB. Result:", request.result);
          reject("Error occurred when putting data into IndexDB");
      };
      request.onsuccess = () => {
          resolve(request.result);
      };
  });

}

export async function main(ns: NS) {

  const indexedDB = window.indexedDB;

  const dbs = await indexedDB.databases();

  for (const db of dbs) {
    ns.tprint(`DB: ${db.name}, ${db.version}`);
  }

  const objectStore = await getData('savestring', 'save');

  const str = await decodeSaveData(objectStore);

  ns.write('save.txt', str);

  const jStr = JSON.parse(str);
  ns.tprint(JSON.stringify(Object.keys(jStr.data), null, 2));
  const pSave = JSON.parse(jStr.data.PlayerSave);
  ns.tprint(JSON.stringify(pSave.data.exploits, null, 2));

  if (pSave.data.exploits.includes('EditSaveFile')) {
    ns.tprint('Already have EditSaveFile exploit');
    return;
  }

  pSave.data.exploits.push('EditSaveFile');
  jStr.data.PlayerSave = JSON.stringify(pSave);

  const newStr = JSON.stringify(jStr);

  const newSave = await encodeJsonSaveString(newStr);

  await putData('savestring', 'save', newSave);
}
